Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example 1:
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

Example 2:
Input: n = 1
Output: ["()"]

Constraints:
1 <= n <= 8

Code: Java

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        generateCombinations(n, 0, 0, "", result);
        return result;
    }
    private void generateCombinations(int n, int open, int close, String current, List<String> result){
        if(current.length() == 2*n){
            result.add(current);
            return;
        }

        if(open < n){
            generateCombinations(n, open + 1, close, current + "(", result);
        }

        if(close < open){
            generateCombinations(n, open, close + 1, current + ")", result);
        }
    }
}

